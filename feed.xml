<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Has been building software for over 17 years! Looking to share some of the knowledge picked up along the way.</description>
    <link>https://pyartez.github.io/</link>
    <atom:link href="https://pyartez.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 05 Aug 2023 09:49:19 +0100</pubDate>
    <lastBuildDate>Sat, 05 Aug 2023 09:49:19 +0100</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Structuring Your First 1-to-1 as an Engineering Manager</title>
        <description>&lt;p&gt;Your first 1-to-1 meeting with each team member is a foundational event in your tenure as an engineering manager. It sets the tone for your relationship and is your opportunity to begin building trust, understanding, and alignment. However, this initial meeting can feel somewhat daunting. How do you structure it to ensure it’s effective and beneficial?&lt;/p&gt;

&lt;p&gt;This article explores how to structure your first 1-to-1 meeting as an engineering manager.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-purpose-of-a-1-to-1&quot;&gt;Understanding the Purpose of a 1-to-1&lt;/h2&gt;

&lt;p&gt;The 1-to-1 meeting is a dedicated time for the manager and the employee to have a private, focused conversation. It serves multiple purposes, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Building a personal relationship&lt;/li&gt;
  &lt;li&gt;Discussing progress, challenges, and support&lt;/li&gt;
  &lt;li&gt;Providing and seeking feedback&lt;/li&gt;
  &lt;li&gt;Exploring professional development opportunities&lt;/li&gt;
  &lt;li&gt;Aligning on goals and expectations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first 1-to-1 meeting with each team member is particularly important as it lays the foundation for these ongoing discussions and your working relationship.&lt;/p&gt;

&lt;h2 id=&quot;structuring-your-first-1-to-1-meeting&quot;&gt;Structuring Your First 1-to-1 Meeting&lt;/h2&gt;

&lt;p&gt;While there is no one-size-fits-all structure for a 1-to-1 meeting, here are some steps you can take to structure your first meeting effectively:&lt;/p&gt;

&lt;h3 id=&quot;1-set-clear-objectives&quot;&gt;1. Set Clear Objectives&lt;/h3&gt;
&lt;p&gt;Start by identifying what you want to achieve in the meeting. This could include getting to know the team member, understanding their role and contributions, discussing their aspirations and concerns, and establishing a communication channel.&lt;/p&gt;

&lt;h3 id=&quot;2-allocate-enough-time&quot;&gt;2. Allocate Enough Time&lt;/h3&gt;
&lt;p&gt;Your first 1-to-1 meeting may take longer than subsequent ones because there’s more ground to cover. Allocate enough time to have a meaningful conversation without rushing - typically, one hour should suffice.&lt;/p&gt;

&lt;h3 id=&quot;3-prepare-ahead&quot;&gt;3. Prepare Ahead&lt;/h3&gt;
&lt;p&gt;Prepare for the meeting by reviewing the team member’s role, responsibilities, performance, and any previous feedback or issues. Also prepare a list of topics or questions to discuss, focusing on understanding and building a relationship, rather than just tasks and performance.&lt;/p&gt;

&lt;h3 id=&quot;4-start-with-a-personal-connection&quot;&gt;4. Start With a Personal Connection&lt;/h3&gt;
&lt;p&gt;Begin the meeting by building rapport. You could talk briefly about your background and management approach, and express your enthusiasm and expectations for your relationship. Also, encourage them to share about themselves - their interests, experiences, and motivations.&lt;/p&gt;

&lt;h3 id=&quot;5-seek-understanding&quot;&gt;5. Seek Understanding&lt;/h3&gt;
&lt;p&gt;Spend a substantial part of the meeting seeking to understand the team member. Ask open-ended questions about their role, accomplishments, challenges, support needs, aspirations, and feedback. Listen attentively and empathetically, and show appreciation for their insights and candor.&lt;/p&gt;

&lt;h3 id=&quot;6-share-your-perspective-and-expectations&quot;&gt;6. Share Your Perspective and Expectations&lt;/h3&gt;
&lt;p&gt;While it’s important to focus on the team member, also share your perspective and expectations as a manager. This could include your objectives, your management style, your expectations for communication and performance, and how you intend to support their success.&lt;/p&gt;

&lt;h3 id=&quot;7-discuss-next-steps&quot;&gt;7. Discuss Next Steps&lt;/h3&gt;
&lt;p&gt;End the meeting by discussing the next steps. This could include actions to address any issues or requests, scheduling the next 1-to-1 meeting, or setting goals or priorities for the coming period. Also, reassure them that they can always reach out to you with any concerns, ideas, or requests.&lt;/p&gt;

&lt;h3 id=&quot;8-follow-up&quot;&gt;8. Follow Up&lt;/h3&gt;
&lt;p&gt;After the meeting, follow up promptly on any actions or commitments. This shows that you take the 1-to-1 meeting seriously and that you respect their input and needs.&lt;/p&gt;

&lt;h2 id=&quot;a-sample-agenda-for-your-first-1-to-1-meeting&quot;&gt;A Sample Agenda for Your First 1-to-1 Meeting&lt;/h2&gt;

&lt;p&gt;Here’s a sample agenda to help you structure your first 1-to-1 meeting as an engineering manager:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introduction (5 minutes)&lt;/li&gt;
  &lt;li&gt;Personal sharing (10 minutes)&lt;/li&gt;
  &lt;li&gt;Discussion about their role, achievements, and challenges (15 minutes)&lt;/li&gt;
  &lt;li&gt;Discussion about their aspirations, concerns, and feedback (15 minutes)&lt;/li&gt;
  &lt;li&gt;Sharing your perspective and expectations (10 minutes)&lt;/li&gt;
  &lt;li&gt;Discussion about next steps and closing (5 minutes)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tips-for-effective-1-to-1-meetings&quot;&gt;Tips for Effective 1-to-1 Meetings&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Be present&lt;/strong&gt; - Focus fully on the team member and the conversation, without distractions or multi-tasking.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be flexible&lt;/strong&gt; - Adapt the structure and style of the meeting to suit the team member’s needs and preferences.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be respectful&lt;/strong&gt; - Show respect for the team member’s ideas, emotions, and efforts, and honor their time and confidentiality.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be open&lt;/strong&gt; - Encourage open, candid communication, and be open to feedback and learning yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Your first 1-to-1 meeting as an engineering manager is a crucial step towards building a strong, productive relationship with your team members. By structuring the meeting effectively, you can create a positive, beneficial experience that lays the groundwork for ongoing communication, trust, and alignment.&lt;/p&gt;

&lt;p&gt;Remember, a 1-to-1 meeting is not just a managerial task, but an opportunity to connect with your team members, appreciate their contributions, and support their success. So, approach these meetings with curiosity, empathy, and dedication, and make the most of the opportunity to influence your team’s performance, satisfaction, and growth.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/management/structuring-your-first-1-to-1-as-an-engineering-manager.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/management/structuring-your-first-1-to-1-as-an-engineering-manager.html</guid>
        
        <category>feedback</category>
        
        <category>management</category>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>Best Practices for Giving Effective Feedback in Engineering Management</title>
        <description>&lt;p&gt;Feedback is a fundamental part of management, especially in the field of engineering where precision, continual learning, and improvement are crucial. It is a powerful tool for guiding your team’s performance, fostering professional development, and building strong relationships. However, giving feedback effectively can be a challenging skill to master.&lt;/p&gt;

&lt;p&gt;This article explores the best practices for giving effective feedback in engineering management.&lt;/p&gt;

&lt;h2 id=&quot;understanding-feedback&quot;&gt;Understanding Feedback&lt;/h2&gt;

&lt;p&gt;Feedback refers to the information that you provide to your team members about their performance, behavior, or outcomes. It can be positive (reinforcing good performance) or constructive (guiding improvements). Feedback is not just about pointing out what’s wrong or right, but about opening a dialogue to promote understanding, learning, and growth.&lt;/p&gt;

&lt;p&gt;As an engineering manager, your role in giving feedback is to guide your team towards achieving their goals and the organization’s objectives, support their professional development, and foster a positive and productive work environment.&lt;/p&gt;

&lt;h2 id=&quot;best-practices-for-giving-effective-feedback&quot;&gt;Best Practices for Giving Effective Feedback&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Be Specific and Clear&lt;/strong&gt; - Effective feedback is specific and clear, focusing on observable actions or outcomes rather than vague attributes. Instead of saying, “You did a good job,” say, “The way you debugged that complex code issue was impressive. Your systematic approach helped us meet the project deadline.” Specific feedback helps the recipient understand exactly what they did well or need to improve.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Be Timely&lt;/strong&gt; - Feedback is most effective when it is given promptly after the action or outcome. This ensures that the details are fresh in everyone’s mind and allows for immediate learning or reinforcement. However, also consider the recipient’s readiness to receive feedback and the appropriateness of the timing and setting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Focus on the Action, Not the Person&lt;/strong&gt; - When giving feedback, focus on the action or outcome, not the person. This helps to separate the issue from the individual and prevents the feedback from being perceived as a personal attack. For example, instead of saying, “You are careless,” say, “I noticed there were several errors in the report. Let’s discuss how we can avoid these mistakes in the future.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use “I” Statements&lt;/strong&gt; - Using “I” statements, such as “I noticed,” “I feel,” or “I suggest,” can help to make your feedback more objective and less accusatory. It expresses your perspective rather than blaming or making assumptions about the other person.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Make it a Two-Way Conversation&lt;/strong&gt; - Feedback should be a two-way conversation, not a one-way lecture. Encourage the recipient to share their perspective, ask questions, and suggest solutions. This promotes understanding, buy-in, and collaboration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Be Constructive and Forward-Looking&lt;/strong&gt; - Constructive feedback focuses on improvement and future performance, rather than dwelling on past mistakes. It identifies what can be done differently or better next time and provides guidance or resources to support improvement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Balance Positive and Constructive Feedback&lt;/strong&gt; - While constructive feedback is important for learning and improvement, positive feedback is equally important for reinforcing good performance and boosting motivation and confidence. Strive for a balanced mix of positive and constructive feedback.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Consider the Recipient’s Perspective&lt;/strong&gt; - Effective feedback is sensitive to the recipient’s perspective, needs, and emotions. Consider their personality, their understanding of the issue, their readiness to receive feedback, and how they might perceive and react to your feedback. Tailor your feedback approach to suit the recipient.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Be Genuine and Respectful&lt;/strong&gt; - Feedback should be genuine, honest, and respectful. Avoid flattery or criticism that is not sincere or warranted. Show respect for the recipient’s feelings, ideas, and efforts, even when you are discussing areas for improvement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Follow Up&lt;/strong&gt; - Feedback doesn’t end with the conversation. It’s important to follow up to ensure that the feedback has been understood and acted upon. This could involve discussing a plan for improvement, providing resources or support, reviewing progress, or acknowledging improvements.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scenarios-and-strategies-in-engineering-management&quot;&gt;Scenarios and Strategies in Engineering Management&lt;/h2&gt;

&lt;p&gt;Let’s consider a few scenarios related to giving feedback in engineering management and strategies to handle them effectively.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1-poor-performance&quot;&gt;Scenario 1: Poor Performance&lt;/h3&gt;

&lt;p&gt;Suppose an engineer on your team, Alice, is consistently failing to meet her deadlines, causing delays in the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Have a private conversation with Alice about her performance. Be specific and objective about the issue (“I’ve noticed that the last three tasks have been submitted past the deadline”), and express your concern about its impact on the project. Encourage Alice to share her perspective and challenges. Discuss a plan for improvement and offer your support. Follow up regularly to review progress.&lt;/p&gt;

&lt;h3 id=&quot;scenario-2-outstanding-performance&quot;&gt;Scenario 2: Outstanding Performance&lt;/h3&gt;

&lt;p&gt;Imagine a situation where a junior engineer, Bob, has demonstrated an exceptional performance by solving a complex problem that even senior engineers were struggling with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Acknowledge Bob’s achievement promptly and publicly. Be specific about what he did well (“Your solution to the complex problem was impressive and helped us move forward in the project”). Express your appreciation and confidence in his abilities. This positive feedback will boost Bob’s motivation and confidence and set a positive example for the team.&lt;/p&gt;

&lt;h3 id=&quot;scenario-3-unprofessional-behavior&quot;&gt;Scenario 3: Unprofessional Behavior&lt;/h3&gt;

&lt;p&gt;Consider a situation where a team member, Carol, frequently interrupts others during meetings, making some team members feel disrespected and unheard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Address the issue privately with Carol. Focus on the behavior, not the person (“I’ve noticed that during meetings, there are times when others are interrupted”). Explain its impact on the team. Ask Carol for her perspective and discuss how meetings can be more respectful and inclusive. Follow up to ensure the behavior changes.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Giving effective feedback is a critical skill in engineering management. It involves being specific, timely, action-focused, constructive, balanced, considerate, genuine, and respectful. It’s about engaging in a two-way conversation to promote understanding, learning, and growth, and following up to ensure feedback is acted upon.&lt;/p&gt;

&lt;p&gt;By implementing the best practices discussed in this article, you can give feedback effectively, guiding your team’s performance, supporting their professional development, and fostering a positive and productive work environment.&lt;/p&gt;

&lt;p&gt;Remember, feedback is not just about correcting mistakes or enforcing standards. It’s about showing your team that you care about their success, growth, and well-being. So, approach feedback with empathy, openness, and dedication, and make a positive difference in your team’s performance, development, and morale.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jul 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/management/best-practices-for-giving-effective-feedback-in-engineering-management.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/management/best-practices-for-giving-effective-feedback-in-engineering-management.html</guid>
        
        <category>feedback</category>
        
        <category>management</category>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>Best Practices for Managing Employee Career Development in Engineering Management</title>
        <description>&lt;p&gt;The dynamic field of engineering is characterized by rapid technological advancements, shifting market demands, and an ever-evolving professional landscape. Consequently, the career development of engineers is a critical concern for engineering managers. Not only does it impact the satisfaction and retention of the team, but it also influences the long-term success and competitive edge of the organization.&lt;/p&gt;

&lt;p&gt;This article explores the best practices for managing employee career development in engineering management.&lt;/p&gt;

&lt;h2 id=&quot;understanding-employee-career-development&quot;&gt;Understanding Employee Career Development&lt;/h2&gt;

&lt;p&gt;Employee career development refers to the progression of an employee’s career goals, skills, knowledge, and experience over time. It involves identifying career paths, setting career goals, acquiring necessary skills, and achieving career milestones. Career development can involve promotions, lateral moves, skill enhancement, or even a change of career direction.&lt;/p&gt;

&lt;p&gt;As an engineering manager, your role in managing career development is to guide, support, and facilitate your team members in their career journeys. It’s about helping them realize their full potential, align their career goals with the organization’s objectives, and navigate the opportunities and challenges in their career paths.&lt;/p&gt;

&lt;h2 id=&quot;best-practices-for-managing-employee-career-development&quot;&gt;Best Practices for Managing Employee Career Development&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Understand Individual Career Aspirations&lt;/strong&gt;: Every engineer on your team will have unique career aspirations, interests, and values. It’s important to understand these individual differences and consider them in career development planning. Regular one-on-one meetings are a great opportunity to discuss career aspirations, identify career goals, and understand what motivates and interests each team member.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Define Clear Career Paths&lt;/strong&gt;: Career paths in engineering can be diverse and multifaceted, involving different specializations, roles, and levels. Define clear career paths within your organization, outlining the roles, skills, qualifications, and experiences required at each level. This provides a roadmap for your team members to plan and navigate their career progression.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Set SMART Career Goals&lt;/strong&gt;: Career goals should be SMART - Specific, Measurable, Achievable, Relevant, and Time-bound. Work with each team member to set SMART career goals that align with their career aspirations and the organization’s objectives. Regularly review and adjust these goals as needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Provide Opportunities for Skill Development&lt;/strong&gt;: Continuous skill development is crucial for career advancement in engineering. Provide opportunities for your team members to learn and develop the skills needed for their career goals. This could involve on-the-job training, workshops, courses, conferences, mentorship, or self-learning resources.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Offer Career Development Support&lt;/strong&gt;: Career development can involve challenges, uncertainties, and transitions. Provide support to your team members throughout their career journeys, helping them make informed career decisions, overcome obstacles, and manage transitions. This could involve career coaching, mentorship, or support from HR or career services.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Foster a Culture of Learning and Growth&lt;/strong&gt;: A culture that values learning and growth encourages continuous career development. Foster this culture by recognizing and rewarding learning and growth, promoting knowledge sharing, and providing a safe environment for experimentation and learning from failure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Facilitate Internal Mobility&lt;/strong&gt;: Internal mobility, such as lateral moves or promotions within the organization, can provide valuable career development opportunities. Facilitate internal mobility by keeping your team informed about internal opportunities, encouraging them to apply, and supporting them in the transition.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Provide Performance Feedback and Career Guidance&lt;/strong&gt;: Regular performance feedback and career guidance are critical for career development. Provide constructive feedback on your team’s work, highlighting strengths, areas for improvement, and strategies for development. Discuss their career progress, provide guidance on career opportunities and challenges, and help them align their performance with their career goals.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scenarios-and-strategies-in-engineering-management&quot;&gt;Scenarios and Strategies in Engineering Management&lt;/h2&gt;

&lt;p&gt;Let’s look at some scenarios related to career development in engineering management and strategies to handle them effectively.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1-skill-development&quot;&gt;Scenario 1: Skill Development&lt;/h3&gt;

&lt;p&gt;Imagine a situation where an engineer, Alice, is interested in transitioning from a software engineering role to a data science role within your organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Begin by discussing Alice’s career aspirations and understanding her motivation to transition into data science. Next, identify the skills and experiences required for a data science role, and assess Alice’s current skill set. Create a skill development plan which could include relevant training, courses, or projects. Offer support and resources to help Alice learn and apply these new skills, and provide regular feedback on her progress.&lt;/p&gt;

&lt;h3 id=&quot;scenario-2-career-advancement&quot;&gt;Scenario 2: Career Advancement&lt;/h3&gt;

&lt;p&gt;Consider a situation where a senior engineer, Bob, is eager for career advancement but has been in the same role for several years without a promotion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Have a candid discussion with Bob about his career goals and his expectations for advancement. Review his performance, achievements, and areas for growth. If he’s ready for a higher role, discuss potential opportunities for promotion within the organization. If there are gaps in his skills or performance, provide constructive feedback and help him create a development plan to prepare for advancement.&lt;/p&gt;

&lt;h3 id=&quot;scenario-3-career-transition&quot;&gt;Scenario 3: Career Transition&lt;/h3&gt;

&lt;p&gt;Suppose a team member, Carol, has been a hardware engineer for several years but is now interested in project management.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Discuss Carol’s career aspirations, understand her interest in project management, and assess her suitability for this role. Identify the skills and experiences required for a project management role, and create a career transition plan. This could involve training in project management, mentoring from an experienced project manager, or involvement in project management tasks. Provide support and resources for Carol to learn and apply new skills, and facilitate her transition into a project management role.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Managing employee career development is a complex but rewarding aspect of engineering management. It involves understanding individual career aspirations, defining clear career paths, setting SMART career goals, providing opportunities for skill development, offering career development support, fostering a culture of learning and growth, facilitating internal mobility, and providing performance feedback and career guidance.&lt;/p&gt;

&lt;p&gt;By implementing the best practices discussed in this article, you can help your team members navigate their career paths, achieve their career goals, and realize their full potential. Not only will this enhance their job satisfaction and retention, but it will also contribute to the success and competitiveness of your organization.&lt;/p&gt;

&lt;p&gt;Remember, every engineer on your team has unique career aspirations, strengths, and potential. As an engineering manager, your role is to unlock this potential and guide your team members in their career journeys. So, embrace this role with empathy, openness, and dedication, and make a positive difference in the careers of your engineers.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Jun 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/management/best-practices-for-managing-employee-development-in-engineering-management.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/management/best-practices-for-managing-employee-development-in-engineering-management.html</guid>
        
        <category>development</category>
        
        <category>management</category>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>Best Practices for Preventing and Managing Employee Burnout in Engineering Management</title>
        <description>&lt;p&gt;In the fast-paced, high-pressure world of engineering, employee burnout is a real and present danger. Burnout can lead to decreased productivity, lower job satisfaction, and even serious health problems. As an engineering manager, preventing and managing burnout in your team is not only critical for your team’s well-being but also for the success and sustainability of your projects.&lt;/p&gt;

&lt;p&gt;This article will explore the best practices for preventing and managing employee burnout in engineering management.&lt;/p&gt;

&lt;h2 id=&quot;understanding-employee-burnout&quot;&gt;Understanding Employee Burnout&lt;/h2&gt;

&lt;p&gt;Employee burnout is a state of physical, emotional, and mental exhaustion caused by prolonged stress at work. It is characterized by feelings of cynicism, detachment from work, and a sense of ineffectiveness. Burnout can lead to decreased productivity, increased absenteeism, and higher turnover rates. In the long term, it can also contribute to serious health problems, including depression, heart disease, and other stress-related conditions.&lt;/p&gt;

&lt;h2 id=&quot;best-practices-for-preventing-employee-burnout&quot;&gt;Best Practices for Preventing Employee Burnout&lt;/h2&gt;

&lt;p&gt;Preventing burnout is far more effective than trying to treat it after it has occurred. Here are some best practices to help prevent burnout in your engineering team:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Promote a Balanced Workload&lt;/strong&gt;: One of the main causes of burnout is an excessive workload. As a manager, ensure that work is distributed evenly and that no one is consistently overburdened. Use project management tools to track tasks and deadlines, and regularly check in with your team to monitor their workload.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Encourage Regular Breaks and Time Off&lt;/strong&gt;: Regular breaks, both during the day and in the form of time off or vacations, are crucial for preventing burnout. Encourage your team to take short breaks throughout the day, and ensure they are using their vacation days. Respect their time off by not contacting them about work-related matters unless absolutely necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Foster a Positive Work Environment&lt;/strong&gt;: A positive work environment, characterized by open communication, mutual respect, and recognition of achievements, can significantly reduce stress and prevent burnout. Foster a culture of appreciation and positivity, and address any issues or conflicts promptly and constructively.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Provide Opportunities for Professional Growth&lt;/strong&gt;: Lack of career advancement or skill development can lead to feelings of stagnation and burnout. Provide opportunities for your team members to learn, grow, and take on new challenges. This could be in the form of training, mentorship, or new projects that stretch their skills.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Prioritize Work-Life Balance&lt;/strong&gt;: Promoting a healthy work-life balance is crucial for preventing burnout. This could involve flexible work hours, remote work options, or policies that discourage working outside of work hours. Respect your team’s personal time and encourage them to engage in activities they enjoy outside of work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;best-practices-for-managing-employee-burnout&quot;&gt;Best Practices for Managing Employee Burnout&lt;/h2&gt;

&lt;p&gt;Despite your best efforts to prevent it, burnout can still occur. Here are some strategies for managing burnout in your engineering team:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Recognize the Signs of Burnout&lt;/strong&gt;: Recognizing the signs of burnout is the first step towards managing it. These signs can include chronic fatigue, decreased productivity, cynicism, increased absenteeism, or health problems. If you notice these signs in a team member, it’s important to address the issue promptly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Open Up a Dialogue&lt;/strong&gt;: If you suspect a team member is experiencing burnout, initiate a supportive and confidential conversation. Express your concern, ask about their wellbeing, and listen empathetically. Avoid making assumptions or judgments, and reassure them of your support.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Implement and Enforce Boundaries&lt;/strong&gt;: Revisit work schedules, responsibilities, and expectations to ensure they are realistic and sustainable. Implement and enforce boundaries to prevent overwork, such as setting clear start and end times for work, discouraging after-hours emails, and protecting lunch breaks and vacation times.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Provide Support and Resources&lt;/strong&gt;: Offer support and resources to help the employee manage stress and recover from burnout. This could include providing access to mental health resources, offering flexible work arrangements, or connecting them with a mentor or coach.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Review and Adjust Workloads&lt;/strong&gt;: If burnout is a result of an excessive workload, review and adjust the tasks and responsibilities of the affected team member. Consider redistributing tasks, extending deadlines, or bringing in additional help if necessary.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scenarios-and-strategies-in-engineering-management&quot;&gt;Scenarios and Strategies in Engineering Management&lt;/h2&gt;

&lt;p&gt;Let’s consider a few scenarios of burnout in engineering management and strategies to handle them effectively.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1-high-workload&quot;&gt;Scenario 1: High Workload&lt;/h3&gt;

&lt;p&gt;Imagine a situation where a team member, Alice, has been working long hours for several weeks on a critical project and shows signs of burnout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Discuss the situation with Alice, expressing your concern and asking about her well-being. Review her workload and identify tasks that could be redistributed, postponed, or eliminated. Enforce work boundaries, such as limiting overtime and ensuring she takes regular breaks and time off. Provide support and resources to help her recover and manage stress.&lt;/p&gt;

&lt;h3 id=&quot;scenario-2-lack-of-career-advancement&quot;&gt;Scenario 2: Lack of Career Advancement&lt;/h3&gt;

&lt;p&gt;Consider a situation where a senior engineer, Bob, is feeling stuck in his role and is showing signs of burnout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Have a career development conversation with Bob, discussing his career goals, interests, and skills. Identify opportunities for growth or advancement, such as new projects, training, or mentorship. Recognize and value his contributions, and ensure he has a clear path for career progression.&lt;/p&gt;

&lt;h3 id=&quot;scenario-3-negative-work-environment&quot;&gt;Scenario 3: Negative Work Environment&lt;/h3&gt;

&lt;p&gt;Suppose a team is working in a high-pressure, negative work environment, leading to widespread burnout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Address the negative factors in the work environment, such as high pressure, lack of communication, or lack of recognition. Foster a positive, supportive culture by promoting open communication, mutual respect, and recognition of achievements. Provide team-building activities and resources for managing stress and improving team dynamics.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Preventing and managing employee burnout is a crucial responsibility of engineering managers. It involves fostering a positive work environment, promoting work-life balance, and providing support and resources for stress management and professional growth.&lt;/p&gt;

&lt;p&gt;By understanding the causes and signs of burnout and applying the strategies discussed in this article, you can protect your team’s well-being, improve their job satisfaction, and enhance their productivity and performance.&lt;/p&gt;

&lt;p&gt;Remember, a healthy, engaged team is not just beneficial for the individuals, but it’s also critical for the success of your projects and the sustainability of your organization. So, make the prevention and management of burnout a top priority in your engineering management practice.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/management/best-practices-for-preventing-and-managing-employee-burnout-in-engineering-management.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/management/best-practices-for-preventing-and-managing-employee-burnout-in-engineering-management.html</guid>
        
        <category>burnout</category>
        
        <category>management</category>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>Best Practices for Handling Difficult Conversations in Engineering Management</title>
        <description>&lt;p&gt;In the dynamic field of engineering management, difficult conversations are inevitable. Whether it’s delivering critical feedback, discussing a project setback, or addressing a conflict between team members, these conversations can be challenging. However, when handled effectively, they can lead to improved performance, stronger relationships, and a more productive work environment.&lt;/p&gt;

&lt;p&gt;This article will explore best practices for handling difficult conversations in engineering management.&lt;/p&gt;

&lt;h2 id=&quot;understanding-difficult-conversations&quot;&gt;Understanding Difficult Conversations&lt;/h2&gt;

&lt;p&gt;Difficult conversations are those that involve high stakes, differing opinions, and strong emotions. They can occur in various situations, such as performance reviews, conflict resolution, change management, or job terminations.&lt;/p&gt;

&lt;p&gt;While these conversations can be uncomfortable, they are essential for addressing issues, making decisions, and driving progress. As an engineering manager, your ability to handle difficult conversations effectively can significantly impact your team’s success.&lt;/p&gt;

&lt;h2 id=&quot;best-practices-for-handling-difficult-conversations&quot;&gt;Best Practices for Handling Difficult Conversations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Prepare Ahead: Before initiating a difficult conversation, take time to prepare. Understand the issue at hand, clarify your objectives for the conversation, and anticipate the other person’s perspective and possible reactions. If necessary, gather relevant facts, data, or examples to support your points.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose the Right Time and Place: Timing and location can significantly influence the outcome of a difficult conversation. Choose a time when both parties are calm and not rushed. Select a private, neutral location to ensure confidentiality and minimize distractions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start the Conversation Positively: Begin the conversation on a positive note. You might express appreciation for the person’s work, acknowledge their feelings, or affirm the importance of your relationship with them. This can help reduce defensiveness and set a constructive tone for the conversation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be Clear and Direct: Clearly express your concerns or feedback, focusing on the issue and not the person. Be direct, but also considerate of the other person’s feelings. Avoid blame, exaggeration, or assumptions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Listen Actively: Active listening involves fully focusing on the speaker, showing empathy, and clarifying understanding. It shows respect for the other person’s perspective and helps you understand their feelings and concerns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Manage Emotions: Difficult conversations can trigger strong emotions. Be aware of your emotions and the other person’s emotions. Stay calm, patient, and composed, even if the other person becomes upset. If emotions escalate, consider taking a break and resuming the conversation later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Seek Solutions Collaboratively: Rather than imposing your solution, involve the other person in problem-solving. Ask for their ideas or suggestions. This can lead to better solutions and increase their commitment to the action plan.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow Up: After the conversation, follow up to check on progress, provide support, or clarify any issues. This shows your commitment to resolving the issue and maintaining a positive relationship.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scenarios-and-strategies-in-engineering-management&quot;&gt;Scenarios and Strategies in Engineering Management&lt;/h2&gt;

&lt;p&gt;Let’s consider a few scenarios where difficult conversations are particularly crucial in engineering management, along with strategies to handle them effectively.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1-providing-critical-feedback&quot;&gt;Scenario 1: Providing Critical Feedback&lt;/h3&gt;

&lt;p&gt;Imagine you have to provide feedback to a team member, Alex, about his performance, which has been below expectations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prepare by gathering specific examples of Alex’s performance issues. Start the conversation positively, perhaps by acknowledging Alex’s efforts or past contributions. Then, clearly and directly express your concerns, using the examples to illustrate your points. Listen to Alex’s perspective, manage emotions, and collaboratively seek solutions.&lt;/p&gt;

&lt;h3 id=&quot;scenario-2-discussing-project-setbacks&quot;&gt;Scenario 2: Discussing Project Setbacks&lt;/h3&gt;

&lt;p&gt;Suppose a project your team is working on has encountered significant setbacks, and you need to discuss this with your team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prepare by understanding the causes of the setbacks and possible solutions. Start the conversation by acknowledging the team’s hard work and expressing confidence in their abilities. Clearly explain the situation, the implications, and your proposed solutions. Encourage open discussion, listen to your team’s ideas and concerns, and collaboratively decide on the next steps.&lt;/p&gt;

&lt;h3 id=&quot;scenario-3-addressing-conflict&quot;&gt;Scenario 3: Addressing Conflict&lt;/h3&gt;

&lt;p&gt;Consider a situation where two team members, Lisa and Mark, are in conflict, affecting team morale and productivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prepare by understanding the nature of the conflict and the perspectives of both Lisa and Mark. Arrange a private meeting with them, starting the conversation on a positive note by acknowledging their value to the team. Encourage each of them to express their feelings and viewpoints, facilitate active listening, and guide them towards a mutually acceptable solution.&lt;/p&gt;

&lt;h3 id=&quot;scenario-4-delivering-bad-news&quot;&gt;Scenario 4: Delivering Bad News&lt;/h3&gt;

&lt;p&gt;Suppose you have to inform your team about budget cuts that will affect resources and possibly lead to layoffs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prepare thoroughly by understanding the reasons for the budget cuts, their implications, and the plan moving forward. Choose the right time and place, and deliver the news clearly and directly, while expressing empathy for the impact on the team. Allow space for reactions, answer questions honestly, and involve the team in planning how to manage the new circumstances.&lt;/p&gt;

&lt;h2 id=&quot;overcoming-common-challenges-in-difficult-conversations&quot;&gt;Overcoming Common Challenges in Difficult Conversations&lt;/h2&gt;

&lt;p&gt;Difficult conversations pose various challenges, from managing emotions to overcoming communication barriers. Here are a few common challenges and tips to overcome them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fear of Reactions: You may fear the other person’s reactions, such as anger, upset, or defensiveness. Overcome this by preparing for the conversation, managing your emotions, and using effective communication skills to express your concerns constructively.&lt;/li&gt;
  &lt;li&gt;Avoidance: You may be tempted to avoid difficult conversations due to discomfort or fear of conflict. Overcome this by recognizing the importance of these conversations for resolving issues and improving relationships.&lt;/li&gt;
  &lt;li&gt;Lack of Skills: You may lack the necessary communication or conflict resolution skills to handle difficult conversations effectively. Improve these skills through training, practice, or mentoring.&lt;/li&gt;
  &lt;li&gt;Emotional Overload: Difficult conversations can be emotionally draining, leading to stress or burnout. Manage this by practicing self-care, developing emotional intelligence, and seeking support when needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Handling difficult conversations is a crucial competency for engineering managers. It involves a delicate balance of clear communication, active listening, emotional intelligence, and collaborative problem-solving.&lt;/p&gt;

&lt;p&gt;By understanding the principles of effective difficult conversations and applying the strategies discussed in this article, you can turn these challenging encounters into opportunities for growth, learning, and relationship building.&lt;/p&gt;

&lt;p&gt;Remember, the goal of a difficult conversation is not to win an argument or impose your views, but to understand each other better, address issues constructively, and strengthen relationships. So, the next time you face a difficult conversation, embrace it with confidence, empathy, and openness.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Jun 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/management/best-practices-for-handling-difficult-conversations-in-engineering-management.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/management/best-practices-for-handling-difficult-conversations-in-engineering-management.html</guid>
        
        <category>conflict</category>
        
        <category>management</category>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>Best Practices for Delegating Effectively in Engineering Management</title>
        <description>&lt;p&gt;Delegation is one of the most critical skills for any manager, especially in the field of engineering. With its inherently collaborative nature and often complex, multifaceted projects, effective delegation can be the difference between a project’s success and failure.&lt;/p&gt;

&lt;p&gt;However, delegation is more than just offloading tasks. It involves entrusting your team with responsibilities, empowering them, and fostering their growth. Done right, it leads to improved efficiency, team development, and a healthier, more balanced workload for everyone.&lt;/p&gt;

&lt;p&gt;This article will explore best practices for delegating effectively in engineering management.&lt;/p&gt;

&lt;h2 id=&quot;understanding-delegation&quot;&gt;Understanding Delegation&lt;/h2&gt;

&lt;p&gt;Delegation is the process of assigning tasks or responsibilities to others. In the context of management, it involves distributing tasks among team members based on their skills, interests, and the team’s overall workload.&lt;/p&gt;

&lt;p&gt;The ability to delegate effectively is essential for many reasons. It allows managers to focus on strategic tasks and decision-making. It helps in developing team members’ skills and promoting their professional growth. It also enhances team productivity and efficiency by ensuring that tasks are done by the most competent individuals.&lt;/p&gt;

&lt;h2 id=&quot;best-practices-for-effective-delegation&quot;&gt;Best Practices for Effective Delegation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Know Your Team: To delegate effectively, you need a deep understanding of your team’s skills, interests, and capacities. This allows you to assign tasks to the most suitable individuals, leading to improved efficiency and job satisfaction. Regular one-on-one meetings, team-building activities, and performance reviews can provide valuable insights into your team’s capabilities and aspirations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Define Tasks Clearly: Each delegated task should be defined clearly. This includes the task’s objectives, expected outcomes, deadlines, and any necessary resources or tools. Avoid vague instructions or assumptions. Ensure the person understands the task and its importance in the broader project context.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Match Tasks to Skills: Assign tasks based on team members’ skills and development goals. This not only increases the chances of the task being done well, but also motivates individuals by showing trust in their abilities and providing opportunities for growth.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Delegate Authority Along with Responsibility: Delegation is not just about assigning tasks; it’s also about entrusting authority. When you delegate a task, ensure the person has the authority to make decisions related to it. This empowers your team members, fosters their problem-solving skills, and reduces bottlenecks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set Clear Expectations: Ensure your team members know what is expected of them. This includes the quality of work, deadlines, and the degree of autonomy they have. Setting clear expectations upfront can prevent misunderstandings and ensure accountability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Monitor Progress, Don’t Micromanage: While it’s important to monitor progress and provide support, avoid micromanaging. Give your team members the freedom to complete tasks in their own way. Regular check-ins or status updates can help keep you informed without being intrusive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Provide Feedback and Recognize Efforts: Provide constructive feedback to help your team members improve. Recognize their efforts and celebrate successes. This not only boosts morale, but also promotes a culture of continuous learning and improvement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Foster a Safe Environment for Mistakes: Mistakes are an inevitable part of learning. Foster an environment where mistakes are seen as learning opportunities, not failures. Encourage your team to take risks, experiment, and learn from their mistakes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;delegation-scenarios-and-strategies-in-engineering-management&quot;&gt;Delegation Scenarios and Strategies in Engineering Management&lt;/h2&gt;

&lt;p&gt;Let’s consider a few scenarios where delegation is particularly crucial in engineering management, along with strategies to handle them effectively.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1-large-scale-projects&quot;&gt;Scenario 1: Large-Scale Projects&lt;/h3&gt;

&lt;p&gt;Large-scale engineering projects involve numerous tasks and responsibilities. Effective delegation is crucial for managing such projects successfully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Break down the project into smaller, manageable tasks. Delegate these tasks based on team members’ skills, interests, and capacities. Ensure each person understands their tasks, the deadlines, and how their work fits into the larger project. Regularly check in on progress and provide support as needed.&lt;/p&gt;

&lt;h3 id=&quot;scenario-2-high-stakes-tasks&quot;&gt;Scenario 2: High-Stakes Tasks&lt;/h3&gt;

&lt;p&gt;There may be high-stakes tasks that carry significant risks or consequences. These tasks require careful delegation to ensure they are handled competently and responsibly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Assign these tasks to individuals with the necessary skills, experience, and judgement. Provide clear guidelines and expectations, and ensure they have all the resources they need. Stay informed about the task’s progress, and be ready to step in if necessary.&lt;/p&gt;

&lt;h3 id=&quot;scenario-3-tasks-for-skill-development&quot;&gt;Scenario 3: Tasks for Skill Development&lt;/h3&gt;

&lt;p&gt;Certain tasks can provide excellent opportunities for team members to develop new skills or gain experience in different areas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Identify the skills or experiences that the task can provide, and delegate it to someone who would benefit from this development. Make sure they understand the learning opportunity, and provide support and feedback to aid their learning.&lt;/p&gt;

&lt;h3 id=&quot;scenario-4-routine-tasks&quot;&gt;Scenario 4: Routine Tasks&lt;/h3&gt;

&lt;p&gt;Routine tasks, such as maintenance work or periodic reporting, can take up a significant amount of time if not delegated effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider delegating routine tasks to less experienced team members as a way to build their skills and free up more experienced members for complex tasks. Alternatively, consider automating these tasks if possible.&lt;/p&gt;

&lt;h2 id=&quot;overcoming-common-challenges-in-delegation&quot;&gt;Overcoming Common Challenges in Delegation&lt;/h2&gt;

&lt;p&gt;While delegation is crucial for effective management, it can also pose several challenges. Here are a few common challenges and tips to overcome them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reluctance to Delegate: Some managers may be reluctant to delegate due to a desire for control, lack of trust in the team, or fear of being seen as lazy. Overcome this by recognizing the value of delegation for the team and the project, building trust with your team, and changing your mindset about delegation.&lt;/li&gt;
  &lt;li&gt;Inadequate Skills or Resources: Sometimes, team members may not have the necessary skills or resources to complete the delegated tasks. Address this by providing training, mentorship, and the necessary tools and resources.&lt;/li&gt;
  &lt;li&gt;Over-delegation: This occurs when too many tasks are delegated to a person, leading to overwhelm and burnout. Avoid this by monitoring your team’s workload and ensuring tasks are distributed evenly.&lt;/li&gt;
  &lt;li&gt;Poor Communication: This can lead to confusion, mistakes, and frustration. Improve communication by clearly defining tasks, setting expectations, and maintaining open lines of communication.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Delegation is a powerful tool in engineering management. It not only improves efficiency and productivity but also empowers your team, fosters skill development, and creates a more balanced and satisfying work environment.&lt;/p&gt;

&lt;p&gt;However, effective delegation requires a deep understanding of your team, clear communication, and trust. It’s about striking a balance between providing guidance and giving autonomy, between monitoring progress and avoiding micromanagement.&lt;/p&gt;

&lt;p&gt;By understanding the principles of effective delegation and applying the strategies discussed in this article, you can harness the power of delegation to drive your team’s success and create a supportive, growth-oriented work environment. Remember, delegation is not just about getting things done; it’s about building a strong, capable, and motivated team.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 May 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/management/best-practices-for-delegating-effectively-in-engineering-management.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/management/best-practices-for-delegating-effectively-in-engineering-management.html</guid>
        
        <category>delegating</category>
        
        <category>management</category>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>Best Practices for Managing Conflict in Engineering Management</title>
        <description>&lt;p&gt;Conflict is an inevitable part of any organization, and engineering teams are no exception. As an engineering manager, dealing with conflict is one of the most challenging aspects of the role. However, if handled effectively, conflict can lead to innovation, improved team dynamics, and increased productivity. This article will explore best practices for managing conflict in engineering management.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-nature-of-conflict&quot;&gt;Understanding the Nature of Conflict&lt;/h2&gt;

&lt;p&gt;Before we delve into conflict management strategies, it’s crucial to understand what conflict is and why it occurs. In the simplest terms, conflict arises from differences. These differences can be in perspectives, interests, or values.&lt;/p&gt;

&lt;p&gt;In the context of an engineering team, conflicts can stem from disagreements over technical decisions, project priorities, or resource allocation. They can also arise from personal differences or communication breakdowns.&lt;/p&gt;

&lt;p&gt;Regardless of the cause, conflicts can have significant negative impacts if not addressed. These can include decreased productivity, damaged relationships, increased stress, and a hostile work environment.&lt;/p&gt;

&lt;h2 id=&quot;adopting-a-proactive-approach&quot;&gt;Adopting a Proactive Approach&lt;/h2&gt;

&lt;p&gt;The first best practice in managing conflict is to adopt a proactive approach. This involves creating an environment where conflicts are less likely to occur and, when they do, they are handled constructively.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Promote Open Communication: Encourage team members to share their ideas, concerns, and feedback openly. Regular team meetings, one-on-ones, and open-door policies can facilitate this.&lt;/li&gt;
  &lt;li&gt;Set Clear Expectations: Make sure your team understands their roles, responsibilities, and the standards expected of them.&lt;/li&gt;
  &lt;li&gt;Encourage Collaboration: Foster a collaborative culture where team members work together and support each other.&lt;/li&gt;
  &lt;li&gt;Provide Training: Provide your team with training in communication, negotiation, and conflict resolution skills.&lt;/li&gt;
  &lt;li&gt;Despite your best efforts, conflicts will inevitably arise. Here are some best practices for managing conflicts when they occur.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;listen-actively&quot;&gt;Listen Actively&lt;/h2&gt;

&lt;p&gt;When a conflict arises, the first step is to listen actively to all parties involved. This involves not just hearing the words, but understanding the underlying feelings, needs, and concerns.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Empathize: Try to understand the situation from each person’s perspective.&lt;/li&gt;
  &lt;li&gt;Ask Questions: Ask open-ended questions to get a deeper understanding of the issue.&lt;/li&gt;
  &lt;li&gt;Paraphrase: Paraphrase what you’ve heard to confirm your understanding.&lt;/li&gt;
  &lt;li&gt;Mediate Fairly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a manager, your role is to mediate the conflict in a fair and neutral manner. Avoid taking sides or making judgments prematurely.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Facilitate Dialogue: Encourage the conflicting parties to communicate directly with each other, expressing their viewpoints respectfully.&lt;/li&gt;
  &lt;li&gt;Focus on Interests, Not Positions: Encourage team members to express their underlying needs and concerns, rather than sticking to their initial positions.&lt;/li&gt;
  &lt;li&gt;Generate Options: Help the parties involved generate multiple options for resolving the conflict.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;resolve-and-learn&quot;&gt;Resolve and Learn&lt;/h2&gt;

&lt;p&gt;Once a resolution has been reached, it’s crucial to ensure that it’s implemented and the conflict doesn’t recur.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow Up: Monitor the situation to ensure that the agreed-upon resolution is implemented.&lt;/li&gt;
  &lt;li&gt;Reflect and Learn: Reflect on the conflict and its resolution. What can be learned? How can similar conflicts be prevented in the future?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dont-avoid-difficult-conversations&quot;&gt;Don’t Avoid Difficult Conversations&lt;/h2&gt;

&lt;p&gt;One of the biggest mistakes managers make is avoiding difficult conversations. However, ignoring conflicts doesn’t make them disappear; it often makes them worse. Address conflicts promptly and directly, while treating all parties with respect and fairness.&lt;/p&gt;

&lt;h2 id=&quot;leverage-diversity&quot;&gt;Leverage Diversity&lt;/h2&gt;

&lt;p&gt;Diverse teams bring different perspectives and ideas, which can lead to conflicts. However, this diversity can also be a strength. Encourage your team to see differences as opportunities for learning and innovation, rather than sources of conflict.&lt;/p&gt;

&lt;h2 id=&quot;seek-help-when-needed&quot;&gt;Seek Help When Needed&lt;/h2&gt;

&lt;p&gt;If a conflict is particularly challenging or if it’s causing significant disruption, don’t hesitate to seek help. This could be from a higher-level manager, a human resources professional, or an external mediator or coach.&lt;/p&gt;

&lt;h2 id=&quot;know-when-to-escalate&quot;&gt;Know When to Escalate&lt;/h2&gt;

&lt;p&gt;While most conflicts can be managed at the team level, there are situations when escalation is necessary. This could be when the conflict involves serious misconduct, such as harassment or discrimination, or when it’s causing significant harm to individuals or the team.&lt;/p&gt;

&lt;h2 id=&quot;foster-a-culture-of-respect&quot;&gt;Foster a Culture of Respect&lt;/h2&gt;

&lt;p&gt;At the heart of effective conflict management is a culture of respect. This involves treating each other with kindness and understanding, even when disagreements occur. It also involves respecting diversity and different viewpoints.&lt;/p&gt;

&lt;h2 id=&quot;the-role-of-emotional-intelligence&quot;&gt;The Role of Emotional Intelligence&lt;/h2&gt;

&lt;p&gt;Emotional Intelligence (EQ) plays a crucial role in conflict management. This includes self-awareness, self-regulation, empathy, and social skills.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Self-Awareness: Recognize your own emotions and how they can impact your reactions to conflict.&lt;/li&gt;
  &lt;li&gt;Self-Regulation: Manage your emotions effectively to remain calm and composed during conflicts.&lt;/li&gt;
  &lt;li&gt;Empathy: Understand and share the feelings of others, which can help de-escalate conflicts.&lt;/li&gt;
  &lt;li&gt;Social Skills: Use effective communication and interpersonal skills to manage and resolve conflicts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;balancing-assertiveness-and-cooperation&quot;&gt;Balancing Assertiveness and Cooperation&lt;/h2&gt;

&lt;p&gt;Managing conflict effectively requires a balance of assertiveness and cooperation. This involves standing up for your own or your team’s needs and interests, while also seeking to understand and accommodate the needs of others.&lt;/p&gt;

&lt;h2 id=&quot;promote-psychological-safety&quot;&gt;Promote Psychological Safety&lt;/h2&gt;

&lt;p&gt;Psychological safety is a sense of trust and respect among team members, where individuals feel safe to express their ideas, take risks, and make mistakes without fear of punishment or ridicule. Teams with high psychological safety are more likely to handle conflicts constructively, as team members feel safe to express their disagreements openly and respectfully.&lt;/p&gt;

&lt;h2 id=&quot;common-conflict-scenarios-and-strategies-for-resolution&quot;&gt;Common Conflict Scenarios and Strategies for Resolution&lt;/h2&gt;

&lt;p&gt;Let’s examine a few common conflict scenarios within engineering teams, and strategies for resolving them effectively.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1-disagreement-over-technical-decisions&quot;&gt;Scenario 1: Disagreement Over Technical Decisions&lt;/h3&gt;

&lt;p&gt;Imagine a situation where two senior engineers, Alice and Bob, have a disagreement over the choice of technology for a new project. Alice believes that adopting a new, cutting-edge technology is the best approach, as it offers advanced features and future-proofs the project. Bob, on the other hand, argues for using a tried-and-true technology that the team is familiar with, to minimize risk and deliver on time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution Strategy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this situation, as a manager, your role is to facilitate a constructive dialogue between Alice and Bob. Encourage them to express their viewpoints, focusing on the underlying interests and concerns, rather than sticking to their initial positions.&lt;/p&gt;

&lt;p&gt;For example, Alice’s interest might be in innovation and staying competitive, while Bob’s interest might be in risk management and efficient delivery. Recognizing these underlying interests can open up new options. Perhaps there’s a way to incorporate the new technology in a limited, controlled way that allows for innovation while managing risk. Or maybe the team could invest in training and support to mitigate the risks associated with the new technology.&lt;/p&gt;

&lt;h3 id=&quot;scenario-2-personality-clashes&quot;&gt;Scenario 2: Personality Clashes&lt;/h3&gt;

&lt;p&gt;Consider another scenario where two team members, Carlos and David, have a personality clash. Carlos is extroverted, outspoken, and likes to brainstorm ideas in group settings. David is introverted, prefers quiet to concentrate, and likes to think through his ideas before sharing them. Their differing styles have led to tension and misunderstandings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution Strategy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this scenario, it’s important to facilitate a conversation between Carlos and David, helping them understand each other’s work styles and needs. Encourage empathy and mutual respect.&lt;/p&gt;

&lt;p&gt;For instance, Carlos could be encouraged to give David a heads-up before discussions and respect his need for quiet working time. David, on the other hand, could be encouraged to express his ideas even if they’re not fully formed, to contribute to the team’s brainstorming sessions.&lt;/p&gt;

&lt;p&gt;By understanding and accommodating each other’s styles, Carlos and David can turn their differences into strengths, fostering a more diverse and inclusive team culture.&lt;/p&gt;

&lt;h3 id=&quot;scenario-3-conflict-over-priorities&quot;&gt;Scenario 3: Conflict Over Priorities&lt;/h3&gt;

&lt;p&gt;In another situation, Emma, a software engineer, feels frustrated because she’s constantly being pulled into urgent bug fixes, leaving her with no time to work on her main project. Frank, the support engineer, feels that resolving customer issues should always be the top priority.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution Strategy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this case, it’s crucial to clarify roles, responsibilities, and priorities. You may need to step in and make a decision, or facilitate a discussion with Emma and Frank about how to balance immediate customer needs with long-term project goals.&lt;/p&gt;

&lt;p&gt;Perhaps there is a way to streamline the bug-fixing process, or allocate specific times for it, so it doesn’t interrupt Emma’s project work. Alternatively, there might be a need for additional resources or better coordination between the project and support teams.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Managing conflict in engineering management is a complex task that requires a diverse set of skills, from effective communication and active listening to empathy, patience, and fairness. It’s about creating a culture where conflicts are not feared or avoided, but embraced as opportunities for learning, growth, and innovation.&lt;/p&gt;

&lt;p&gt;Remember that conflict is not inherently bad. When handled effectively, it can lead to better decisions, increased creativity, stronger relationships, and a more engaged and productive team. As an engineering manager, your role is not to eliminate conflict, but to manage it constructively, turning challenges into opportunities for team growth and success.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 May 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/management/best-practices-for-managing-conflict.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/management/best-practices-for-managing-conflict.html</guid>
        
        <category>conflict</category>
        
        <category>management</category>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>Transitioning from Engineer to Engineering Manager: The Uncharted Terrain</title>
        <description>&lt;p&gt;In the world of tech, transitioning from the role of an engineer to an engineering manager is often viewed as a natural progression. Many engineers, after having honed their technical skills, look forward to the opportunity of expanding their sphere of influence by stepping into a managerial role. However, this transition is not as straightforward as it may seem at first glance. It presents a new set of challenges that are fundamentally different from those encountered in a purely technical role.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-role-shift-from-problem-solver-to-enabler&quot;&gt;Understanding the Role Shift: From Problem-Solver to Enabler&lt;/h2&gt;

&lt;p&gt;One of the most significant challenges in transitioning from engineer to engineering manager is accepting and understanding the fundamental shift in roles. As an engineer, your primary role is to solve technical problems - whether it’s writing code, debugging issues, or designing software architecture. Your success is often measured by the quality of the solutions you deliver and the technical challenges you overcome.&lt;/p&gt;

&lt;p&gt;However, as an engineering manager, your role involves less hands-on problem-solving and more enabling your team to solve problems. You become a facilitator, mentor, and guide, helping to clear roadblocks and provide resources for your team. Your success is now measured less by your personal technical accomplishments and more by the achievements of your team.&lt;/p&gt;

&lt;p&gt;This shift from individual contributor to team leader can be challenging and even discomforting for many new managers. It requires a change in mindset, where you need to redefine what productivity and success mean to you. You’ll need to find fulfillment in the success of others, which can be a difficult transition for someone used to personal technical achievements.&lt;/p&gt;

&lt;h2 id=&quot;mastering-the-art-of-time-management-and-prioritization&quot;&gt;Mastering the Art of Time Management and Prioritization&lt;/h2&gt;

&lt;p&gt;As an engineer, you are often given well-defined tasks and deadlines. Your work is scoped, and you can focus your efforts on technical problem-solving. However, as a manager, your responsibilities become varied and often less defined. You’ll be juggling multiple tasks, from strategic planning and goal-setting to recruitment, team-building, and administrative duties.&lt;/p&gt;

&lt;p&gt;Consequently, effective time management and prioritization become essential skills. You’ll need to learn to balance urgent issues with important long-term goals, delegate tasks, and sometimes, even say ‘no’ to avoid overcommitting yourself or your team.&lt;/p&gt;

&lt;h2 id=&quot;navigating-the-human-element-people-management&quot;&gt;Navigating the Human Element: People Management&lt;/h2&gt;

&lt;p&gt;Perhaps one of the biggest challenges for many new engineering managers is people management. While your previous role primarily involved interacting with code, your new role will involve interacting with people. Understanding and managing human dynamics is much more complex and unpredictable than solving technical problems.&lt;/p&gt;

&lt;p&gt;You’ll need to cultivate a diverse set of skills, including effective communication, conflict resolution, and motivational abilities. You’ll have to navigate team dynamics, manage conflicting personalities, understand individual motivations, and foster a positive, productive work environment. You’ll also need to provide feedback, mentorship, and career development for your team members - tasks that require empathy, patience, and understanding.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge-of-delayed-feedback&quot;&gt;The Challenge of Delayed Feedback&lt;/h2&gt;

&lt;p&gt;In engineering, feedback is often immediate and clear-cut. You write code, run it, and see the results. If something breaks, you fix it. Your impact is visible and quantifiable. However, as a manager, feedback is often delayed and less tangible.&lt;/p&gt;

&lt;p&gt;The impact of decisions you make or initiatives you implement may not be evident for weeks or even months. Measuring success becomes trickier, as it’s often tied to team performance, employee satisfaction, and long-term project outcomes. This delay in feedback can be disconcerting and requires patience, long-term thinking, and an ability to see the big picture.&lt;/p&gt;

&lt;h2 id=&quot;growing-into-a-visionary-leader&quot;&gt;Growing into a Visionary Leader&lt;/h2&gt;

&lt;p&gt;As an engineer, you are typically tasked with implementing visions and plans created by others. However, as an engineering manager, you are expected to set the vision and chart the course. This involves strategic thinking, decision-making under uncertainty, and the ability to inspire and motivate your team to align with your vision. It requires you to shift from a detail-oriented focus to a broader perspective, which can be challenging for many who are used to the concrete world of coding.&lt;/p&gt;

&lt;h2 id=&quot;the-isolated-landscape-of-management&quot;&gt;The Isolated Landscape of Management&lt;/h2&gt;

&lt;p&gt;Being a manager can sometimes feel isolating. You’re often privy to sensitive information that you can’t share with your team. There may be company decisions you have to uphold even if you don’t personally agree with them. You may need to mediate conflicts, deliver difficult feedback, or make tough decisions that not everyone will like. This can create a sense of being ‘alone in the middle’ - between your team and upper management - which many new managers are unprepared for.&lt;/p&gt;

&lt;h2 id=&quot;the-conquest-of-the-challenges-strategies-for-success&quot;&gt;The Conquest of the Challenges: Strategies for Success&lt;/h2&gt;

&lt;p&gt;While these challenges might seem daunting, they can be successfully managed with the right strategies.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Embrace the Change: Recognize that your role has fundamentally changed. Embrace your new identity as a facilitator and leader, and take pride in the success of your team.&lt;/li&gt;
  &lt;li&gt;Develop New Skills: Invest time in developing essential managerial skills, such as effective communication, conflict resolution, strategic thinking, and time management. These are just as important as your technical skills in your new role.&lt;/li&gt;
  &lt;li&gt;Seek Mentorship: Find mentors who can guide you through this transition. They can provide invaluable advice, insights, and moral support.&lt;/li&gt;
  &lt;li&gt;Prioritize Self-Care: The role of a manager can be stressful. Make sure to take care of your mental health. Practice mindfulness, maintain a healthy work-life balance, and seek professional help if needed.&lt;/li&gt;
  &lt;li&gt;Embrace Continuous Learning: Accept that you’ll make mistakes, but view them as learning opportunities. Strive to learn and grow continuously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Transitioning from engineer to engineering manager is a significant career shift, filled with challenges but also opportunities for personal and professional growth. It’s a journey that requires not just technical expertise but also a broad range of soft skills.&lt;/p&gt;

&lt;p&gt;However, it’s important to remember that management is not the only path for career progression. Many companies now offer ‘individual contributor’ tracks, allowing engineers to take on more complex problems and responsibilities without moving into management.&lt;/p&gt;

&lt;p&gt;Whether you decide to pursue management or remain an individual contributor, the key is to understand your strengths, passions, and career aspirations, and align them with your chosen path. Remember, a successful career is not just about titles or roles, but about continuous learning, growth, and making a positive impact in your organization.&lt;/p&gt;

&lt;p&gt;In the end, whether you’re writing code or leading a team, the most important thing is to find joy and fulfillment in what you do. This will not only lead to personal satisfaction but also to a successful and rewarding career.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 May 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/management/transitioning-from-engineer-to-engineering-manager.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/management/transitioning-from-engineer-to-engineering-manager.html</guid>
        
        <category>progression</category>
        
        <category>management</category>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>SOLID Principles in Swift - Dependency Inversion Principle</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;In this series of posts we are going to be covering the SOLID principles of software development. These are a set of principles / guidelines, that when followed when developing a software system, make it more likely that the system will be easier to extend and maintain over time. Let’s take a look at the problems that they seek to solve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fragility: A change may break unexpected parts, it is very difficult to detect if you don’t have a good test coverage&lt;/li&gt;
  &lt;li&gt;Immobility: A component is difficult to reuse in another project or in multiple places of the same project because it has too many coupled dependencies&lt;/li&gt;
  &lt;li&gt;Rigidity: A change requires a lot of effort because it affects several parts of the project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what are the SOLID principles?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single Responsibility Principle - A class should have only a single responsibility / have only one reason to change&lt;/li&gt;
  &lt;li&gt;Open-Closed Principle - Software should be open for extension but closed for modification&lt;/li&gt;
  &lt;li&gt;Liskov Substitution Principle - Objects in a program should be replaceable with instances of their sub types without altering the correctness of the program&lt;/li&gt;
  &lt;li&gt;Interface Segregation Principle - Many client-specific interfaces are better than one general-purpose interface&lt;/li&gt;
  &lt;li&gt;Dependency Inversion Principle - High level modules should not depend on low level modules. Both should depend on abstractions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article we will focus on the Dependency Inversion Principle.&lt;/p&gt;

&lt;h2 id=&quot;what-does-it-mean&quot;&gt;What does it mean?&lt;/h2&gt;

&lt;p&gt;This principle has 2 main components described below:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;High-level modules should not import anything from low-level modules. Both should depend on abstractions (e.g., interfaces)
Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve interviewed many iOS developers over the years and I struggle to recall a single person who has actually got this part of the SOLID principles 100% right. I think a large part of this comes from the fact many use simple architectures such as MVVM that don’t break applications down into smaller layers and components/modules. This isn’t a criticism, not every app needs a VIPER/Clean architecture approach with multiple layers.&lt;/p&gt;

&lt;p&gt;Most iOS developers I speak to come to the conclusion that this principle just means using protocols instead of concrete classes and injecting dependencies to help with testing/mocking. While this principle does rely on this to work it is not the primary purpose of the principle and exposes an issue once you start to depend on abstractions used across multiple layers / modules.&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6959344114005358&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-6959344114005358&quot; data-ad-slot=&quot;4928663865&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Lets setup a simple example in Xcode where we have two separate modules that depend on each other in order to provide some functionality.&lt;/p&gt;

&lt;p&gt;If we create a simple Swift UI project using Xcode, then using File -&amp;gt; New -&amp;gt; Package create 2 new swift packages and add them to the project. One called LibraryA and one called LibraryB. Be sure to select your project in the ‘Add to’ drop down when naming your libraries. You should have something that looks like below Xcode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/packages-setup.png&quot; alt=&quot;Swift Packages Setup&quot; title=&quot;Swift Packages Setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s start by adding a protocol and some custom data structure that we are going to be using across the 2 libraries we are working. Add a file called Protocol.swift in LibraryA and add the following code below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have a simple one function protocol and a small struct, this is what we will be using to separate dependencies between our 2 libraries.&lt;/p&gt;

&lt;p&gt;Next, lets create an implementation in LibraryA that has these protocols as a dependency. Create a file in LibraryA with the name ImplementationA:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImplementationA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is just a simple class that has the MyProtocol protocol has a dependency. Simple enough so far!&lt;/p&gt;

&lt;p&gt;Now let’s create a class in LibraryB that implements the protocol that is being used in our class in LibraryA. Create a class in LibraryB called ImplementationB:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LibraryA&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImplementationB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LibraryA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Do something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have our class in LibraryB that is implementing the protocol we previously created in LibraryA. For this reason you will notice that we have to import LibraryA in this class as well. There is one additional step we need to do before this will compile correctly, we need to define our dependency in our package file. Let’s open the LibraryB package file and edit it to add the dependency between the 2 packages:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PackageDescription&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Assign LibraryA as dependency&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;../LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Add dependency to target&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryBTests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We won’t go into all the options you need in the swift package file but hopefully by reading this you can see we have defined a dependency and added it to our LibraryB target. If you attempt to build the project it should compile successfully.&lt;/p&gt;

&lt;p&gt;Now let’s look at the structure of these 2 libraries and their relationship to each other.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/libraryb-to-a.png&quot; alt=&quot;LibraryB to LibraryA Dependency&quot; title=&quot;LibraryB to LibraryA Dependency&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have LibraryA, this contains the protocols and LibraryB that implements the protocols. In order for LibraryB to implement the protocols it needs a dependency to LibraryA in order to work.&lt;/p&gt;

&lt;h2 id=&quot;problem-1&quot;&gt;Problem 1&lt;/h2&gt;

&lt;p&gt;Now what happens if we want to use the protocols in another Library? Let’s call this LibraryC? At moment the protocols are contained in LibraryA where they are being used and implemented by Library B.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can’t use the protocols in another library without adding LibraryA which may contain code and other assets we don’t want.&lt;/li&gt;
  &lt;li&gt;We could copy the protocols to LibraryC, however if you needed LibraryA and LibraryC in the same project you would get class clashes.&lt;/li&gt;
  &lt;li&gt;We would need to edit LibraryB to add another dependency in this case. What happens if we are not the owners of LibraryB? How would we even do this?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One solution we can try is moving the protocols from LibraryA to LibraryB. This reverses the dependencies and helps to solve the problems highlighted above. Let’s go ahead and do this now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the Protocols.swift file we created from LibraryA to LibraryB&lt;/li&gt;
  &lt;li&gt;Remove the import of LibraryA from the implementationB.swift&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImplementationB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Do something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Add an import of LibraryB to the top of implementationA.swift&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LibraryB&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImplementationA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Update the LibraryB package file to remove the LibraryA dependency&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PackageDescription&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Assign LibraryA as dependency&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Add dependency to target&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryBTests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Update the LibraryA package file to add the LibraryB dependency&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PackageDescription&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Products define the executables and libraries a package produces, and make them visible to other packages.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Dependencies declare other packages that this package depends on.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;../LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Targets are the basic building blocks of a package. A target can define a module or a test suite.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Targets can depend on other targets in this package, and on products in packages this package depends on.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryATests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s see a diagram of what we have done. Now if we look at our 2 libraries at a high level the dependencies look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/librarya-to-b.png&quot; alt=&quot;LibraryA to LibraryB Dependency&quot; title=&quot;LibraryA to LibraryB Dependency&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now, our LibraryA has a dependency on LibraryB. LibraryA is using the protocols that are defined AND implemented in LibraryB! Problem solved… right… Not entirely.&lt;/p&gt;

&lt;p&gt;If we review the problems we discussed earlier, if LibraryC wanted to make use of the protocols and implementation in LibraryB that is now possible as LibraryB has no knowledge of LibraryA or LibraryC. However this creates a new problem…&lt;/p&gt;

&lt;h2 id=&quot;problem-2&quot;&gt;Problem 2&lt;/h2&gt;

&lt;p&gt;What if LibraryA and LibraryC want to use different implementations of the protocols from each other? What if we introduced LibraryD that wanted to implement the protocols and be used by another library such as LibraryC? In order to facilitate this we would need to create a dependency between LibraryD and LibraryB. What problems does this create?&lt;/p&gt;

&lt;p&gt;We are introducing a dependency to a library we don’t need, in order to implement the protocols within it. In our example there isn’t much in LibraryB but imagine LibraryB had lots of other code and its own dependencies? Now we are including all of those in our project in order to have access to the protocols.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/librarya-to-b-problems.png&quot; alt=&quot;LibraryA to LibraryB Dependency Problems&quot; title=&quot;LibraryA to LibraryB Dependency Problems&quot; /&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6959344114005358&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-6959344114005358&quot; data-ad-slot=&quot;4928663865&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;This is where Dependency Inversion comes in. What we need to do is create a separate library for the protocols and any data that passes through them. Then, we make the dependencies between our different libraries to that one, thus removing the dependencies between our different layers. Let’s do that now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new package and add it to your project, naming it Protocols. Now move the Protocols.swift file that we created earlier into the Protocols package. Your Xcode project file explorer should look like below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/packages-protocol-setup.png&quot; alt=&quot;Protocols in own package&quot; title=&quot;Protocols in own package&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now lets edit the dependencies of our packages so that both LibraryA and LibraryB depend on protocols. Your package files for LibraryA and B should now look like the below:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PackageDescription&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Products define the executables and libraries a package produces, and make them visible to other packages.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Dependencies declare other packages that this package depends on.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;../Protocols&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Targets are the basic building blocks of a package. A target can define a module or a test suite.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Targets can depend on other targets in this package, and on products in packages this package depends on.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Protocols&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryATests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PackageDescription&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Products define the executables and libraries a package produces, and make them visible to other packages.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Dependencies declare other packages that this package depends on.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;../Protocols&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Targets are the basic building blocks of a package. A target can define a module or a test suite.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Targets can depend on other targets in this package, and on products in packages this package depends on.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Protocols&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LibraryBTests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now update the imports of your implementation files so that they import Protocols instead. Your implementation files should look like the below:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Protocols&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImplementationA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Protocols&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImplementationB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Do something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s have a look at what we have done here. We have moved the dependencies between the layers into a separate package and are now pointing both sides at that rather than one way or the other. Let’s update our diagram to show how this helps us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dependency-inversion.png&quot; alt=&quot;Dependency Inversion&quot; title=&quot;Dependency Inversion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now if we want to use LibraryA, B, C, or D it does not matter in our dependency graph. They all point to the protocols and data and can be used interchangeably without the need to modify the libraries, so they depend on each other. We also avoid importing any unnecessary classes that we don’t need in order to satisfy the dependencies.&lt;/p&gt;

&lt;p&gt;This is what dependency inversion is. It’s separating protocols and data dependencies from the dependencies themselves and putting them into their own package. This way you completely separate the layers from each other, and they can be used together without any knowledge of each other. Awesome!&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2023 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/architecture/solid-principles-in-swift-dependency-inversion-principle.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/architecture/solid-principles-in-swift-dependency-inversion-principle.html</guid>
        
        <category>swift</category>
        
        <category>architecture</category>
        
        
        <category>architecture</category>
        
      </item>
    
      <item>
        <title>SOLID Principles in Swift - Interface Segragation Principle</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;In this series of posts we are going to be covering the SOLID principles of software development. These are a set of principles / guidelines, that when followed when developing a software system, make it more likely that the system will be easier to extend and maintain over time. Let’s take a look at the problems that they seek to solve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fragility: A change may break unexpected parts, it is very difficult to detect if you don’t have a good test coverage&lt;/li&gt;
  &lt;li&gt;Immobility: A component is difficult to reuse in another project or in multiple places of the same project because it has too many coupled dependencies&lt;/li&gt;
  &lt;li&gt;Rigidity: A change requires a lot of effort because it affects several parts of the project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what are the SOLID principles?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single Responsibility Principle - A class should have only a single responsibility / have only one reason to change&lt;/li&gt;
  &lt;li&gt;Open-Closed Principle - Software should be open for extension but closed for modification&lt;/li&gt;
  &lt;li&gt;Liskov Substitution Principle - Objects in a program should be replaceable with instances of their sub types without altering the correctness of the program&lt;/li&gt;
  &lt;li&gt;Interface Segregation Principle - Many client-specific interfaces are better than one general-purpose interface&lt;/li&gt;
  &lt;li&gt;Dependency Inversion Principle - High level modules should not depend on low level modules. Both should depend on abstractions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article we will focus on the Interface Segregation Principle.&lt;/p&gt;

&lt;h2 id=&quot;what-does-it-mean&quot;&gt;What does it mean?&lt;/h2&gt;

&lt;p&gt;The summary of the principle is as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Many client-specific interfaces are better than one general-purpose interface&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Swift, we use &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Protocols.html&quot;&gt;Protocols&lt;/a&gt; rather than interfaces in languages such as Java so from here on out we will refer to interfaces as Protocols.&lt;/p&gt;

&lt;p&gt;Now the purpose of this rule is quite straight forward in comparison to some of the other rules in the SOLID principles. What it means is its better to create smaller Protocols than to create one large one with lots of methods defined.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-problem&quot;&gt;What’s the problem&lt;/h2&gt;

&lt;p&gt;So why does having one large protocol cause a problem? Let’s examine one of the classic Cocoa Touch protocols to see why this is an issue.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObjectProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForHeaderInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForFooterInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canEditRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canMoveRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sectionIndexTitles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sectionForSectionIndexTitle&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editingStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EditingStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sourceIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destinationIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am sure many of you have implemented this protocol at some point in your past ;) I have modified the source slightly to make it easier to read and get the point across So why are we looking at this?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Only 2 methods you have to implement on the first 2.&lt;/li&gt;
  &lt;li&gt;The rest of the methods are optional and you can implement whichever ones you feel you want to use.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now this protocol has its roots in &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html&quot;&gt;Objective C&lt;/a&gt; helps it masks the problem somewhat. In Objective C as you can see in the code above its possible to mark certain functions as optional. This means you can implement them if you want to but don’t have to, this allows this protocol declaration to contain too many methods without causing problems for the implementing class.&lt;/p&gt;

&lt;p&gt;In Swift, it is not possible to mark functions as optional, all functions need to be implemented. Let’s update the above protocol to be more Swifty and see what problems that might cause us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyUITableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForHeaderInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForFooterInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canEditRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canMoveRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sectionIndexTitles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sectionForSectionIndexTitle&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editingStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EditingStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sourceIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destinationIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have converted our protocol to be more swifty, what problem will this cause when we attempt to make a class conform to this protocol? Let’s have a look at an example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyTableViewDatasource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyUITableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForHeaderInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForFooterInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canEditRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canMoveRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sectionIndexTitles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sectionForSectionIndexTitle&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editingStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EditingStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sourceIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destinationIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our class above now has to implement every single protocol method. Even if we don’t intend to use it. In the objective c implementation of the protocol we have the option of implementing only the ones we need whereas now we must implement every single method. Imagine all the view controllers in the world that would be full of empty methods in order to conform to this protocol!&lt;/p&gt;

&lt;p&gt;This protocol breaks the interface segregation principle.&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6959344114005358&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-6959344114005358&quot; data-ad-slot=&quot;4928663865&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-better-solution&quot;&gt;A better solution&lt;/h2&gt;

&lt;p&gt;To improve the solution we could break the one big interface down into smaller protocols. That way we could conform to only the protocols we were interested in implementing for our functionality. This may looks something like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UITableViewDataSource - For the 2 compulsory methods we are familier with&lt;/li&gt;
  &lt;li&gt;UITableViewSectionsDatasource - For methods relating to multi section methods&lt;/li&gt;
  &lt;li&gt;UITableViewSectionTitles - For methods relating to headers and footers in sections&lt;/li&gt;
  &lt;li&gt;UITableViewEditable - For methods relating to editing and moving cells&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way we could conform to select methods we want, rather than one big interface where we may only want a small subset of the methods.&lt;/p&gt;

&lt;h2 id=&quot;a-good-example&quot;&gt;A good example&lt;/h2&gt;

&lt;p&gt;A good example of interface segregation in the iOS SDK is Codable. The definition of Codable is as below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encodable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basically Codable is just the combination of 2 other protocols: Decodable and Encodable. This is a great example of how to do the interface segregation. If you are building say a JSON parse struct, you may wish to only conform to Decodable so you can decode the JSON. If in the future you wanted to serialize the struct for something like say data storage you can conform to Encoding later if needed.&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6959344114005358&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-6959344114005358&quot; data-ad-slot=&quot;4928663865&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The interface segregation principle is the easiest of the principles to understand in my opinion. In basic terms it means don’t create a big protocol with lots of methods that aren’t always required to be implemented depending on the implementation requirements.&lt;/p&gt;

&lt;p&gt;Instead, separate the protocol into smaller protocols with only the methods required for a single piece of functionality to work. Not only does this avoids having lots of redundant methods it also helps to facilitate the single responsibility principle by allowing functionality to be broken down into different classes. For example, you could have different classes to handle different activities rather than one big class with all functionality in.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 May 2022 06:00:00 +0100</pubDate>
        <link>https://pyartez.github.io/architecture/solid-principles-in-swift-interface-segragation-principle.html</link>
        <guid isPermaLink="true">https://pyartez.github.io/architecture/solid-principles-in-swift-interface-segragation-principle.html</guid>
        
        <category>swift</category>
        
        <category>architecture</category>
        
        
        <category>architecture</category>
        
      </item>
    
  </channel>
</rss>
